<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShip</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprShipMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dX = 0;
dY = -5;
dead = 0;
particleTimer = 1;
canMove = sec(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gameState != GAME_STATE_PAUSE){
    if (!dead){    
        if (particleTimer &lt;= 0){
            var a = instance_create(x + dcos(image_angle - 136 + random_range(-2, 2)) * 10, y - dsin(image_angle - 136 + random_range(-2, 2)) * 10, objCircleParticle);
            a.dY = 3 + max(.5, abs(dY));
            var a = instance_create(x + dcos(image_angle - 49 + random_range(-2, 2)) * 10, y - dsin(image_angle - 49 + random_range(-2, 2)) * 10, objCircleParticle);
            a.dY = 3 + max(.5, abs(dY));
            if (canMove &lt;= 0){
               particleTimer = 60 - fps;
            }else{
               particleTimer = 1;   
            }
        }
        particleTimer --;
        
        if (canMove &lt;= 0){
            image_angle = -dX * 2.5;
            dX *= 1 - .1;
            dY *= 1 - .1;
            
            if (check_input(KEY_SLOMO)){
               if (!global.sloMo){
                  play_sound_at_volume(sndSloMo, 1);
               }else{
                  play_sound_at_volume(sndSloMoBack, 1);   
               }
               global.sloMo = !global.sloMo;
            }
            
            if (global.sloMo){
               damage(GAME_SPEED * 1.75);
            }else{
               heal(GAME_SPEED * .025);   
            }
            
            if (check_input(KEY_SHOOT)){
               if (global.ammo &gt; 0){
                   play_sound_at_volume_random(sndShoot, .8, .9, 1.2);
                   instance_create(x + dcos(image_angle + 90) * 10, y - dsin(image_angle + 90) * 10, objBullet);
                   global.ammo --;
               }else{
                   play_sound_at_volume(sndNoAmmo, 1);  
               }
            }

            if (global.gp2 != 1){
                if (gamepad_axis_value(global.gp2, gp_axislh) &lt; 0 &amp;&amp; x &gt; 200){
                   dX += gamepad_axis_value(global.gp2, gp_axislh) * .8;
                }
                if (gamepad_axis_value(global.gp2, gp_axislh) &gt; 0 &amp;&amp; x &lt; 440){
                   dX += gamepad_axis_value(global.gp2, gp_axislh) * .8;
                } 
                
                if (gamepad_axis_value(global.gp2, gp_axislv) &lt; 0 &amp;&amp; y &gt; 40){
                   dY += gamepad_axis_value(global.gp2, gp_axislv) * .8;  
                }
                if (gamepad_axis_value(global.gp2, gp_axislv) &gt; 0 &amp;&amp; y &lt; 320){
                   dY += gamepad_axis_value(global.gp2, gp_axislv) * .8;  
                } 
            }
            
            dX += ((check_input(KEY_RIGHT) * (x &lt; 440)) - (check_input(KEY_LEFT) * (x &gt; 200))) * .65;  
            dY += ((check_input(KEY_DOWN) * (y &lt; 320)) - (check_input(KEY_UP) * (y &gt; 40))) * .65;   
            dY = clamp(-5, dY, 5);
            dX = clamp(-5, dX, 5);
            
            if (x &lt; 200){
               x += (200 - x) * .03; 
            }
            if (x &gt; 440){
               x += (440 - x) * .03; 
            }
            
            if (y &lt; 40){
               y += (40 - y) * .03; 
            }
            if (y &gt; 320){
               y += (320 - y) * .03; 
            }
            
            x += dX;
            y += dY;
            
            var a = instance_place(x, y, objEnemy0);
            if (a != noone){
               with (a){
                    explode();
               }
               if (global.comboMultiplier &gt; 5){
                   global.scr = max(0, round(global.scr - (global.comboMultiplier * global.comboScore) / 2));
                   comboEndValue = "-" + string(round((global.comboMultiplier * global.comboScore) / 2));
                   comboEndFade = 1;
                   global.comboTimer = 0;
                   global.comboValue = 0;
                   global.comboOn = 0;
                   global.comboMultiplier = 0;
               }
               shake(10);
               damage(10);
            }
            
            var a = instance_place(x, y, objBullet);
            if (a != noone){
               if (!a.players){
                  if (global.sloMo){
                     global.ammo++;
                     play_sound_at_volume(sndAmmo, 1);
                  }else{
                     damage(3.5);  
                     shake(1.5); 
                  }
                  with (a) instance_destroy();
               }
            }
            
            if (global.hlthInterpolated &lt;= 0){
               global.hlth = 0;
               global.hlthInterpolated = 0;
               global.sloMo = true;
               GAME_SPEED = 1;
               global.gameState = GAME_STATE_DEAD;
               global.comboTimer = 0;
               global.comboValue = 0;
               global.comboOn = 0;
               global.comboMultiplier = 0;
               repeat(50){
                   var _x = x + irandom_range(-5, 5)
                   var _y = y + irandom_range(-5, 5);
                   var a = instance_create(_x, _y, objCircleParticle);
                   var _dir = random(2 * pi); 
                   var _force = random_range(.1, 4);
                   a.dX = cos(_dir) * _force;
                   a.dY = -sin(_dir) * _force;
                   a.dY += dY;   
                   a.r = random_range(2, 12);
                   a.inverted = true;
                   a._a = 0;
                   a.shrinkSpeed = random_range(.02, .08);
               }
               with (objControl) alarm[1] = sec(4);
               dead = 1;
               mask_index = sprEmptyMask;
               objControl.nextEnd = 1; 
               if (global.scr &gt; global.highScore){
                  ini_open("save.ini");
                  ini_write_real("score", "score", global.scr);
                  ini_close();
               }
               shake(20);
            }
        }else{
           canMove --;   
           dY *= .95;
           y += dY;
           
        }
    }else{
       image_alpha = max(0, image_alpha - .1);   
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
