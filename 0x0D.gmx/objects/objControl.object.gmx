<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gameSpeedSaved = 0;

global.highScore = 0;

ini_open("save.ini");
global.highScore = ini_read_real("score", "score", 0);
ini_close();

surPersistence = surface_create(640, 360);
surface_set_target(surPersistence);
draw_clear(c_white);
surface_reset_target();

global.time = 0;
global.suTime = shader_get_uniform(shaderCRT, "time");

if (audio_is_playing(sndMusic)){
   audio_stop_sound(sndMusic);
}

global.scr = 0;
global.sloMo = 0;
global.hlth = 1;
global.ammo = 0;
global.hlthInterpolated = 1;
global.flash = 1.25;

global.comboFade = 0;
global.comboOn = 0;
global.comboTimer = 0;
global.comboScore = 0;
global.comboMultiplier = 0;
global.hudFade = 0;

comboTimerInterpolated = 0;
scoreInterpolated = 0;
comboMultiplierInterpolated = 0;
comboEndValue = "";
comboEndFade = 0;

GAME_SPEED = 1;

alarm[0] = sec_RT(5);

viewShakeOffsetX = 0;
viewShakeOffsetY = 0;
viewShakeOffsetXTo = 0;
viewShakeOffsetYTo = 0;
global.enemyCount = 0;
screenAngle = 320;
///
//
timerBcgBuilding = 10;
nextEnd = 0;
endFlash = 0;


for (var _y = 0; _y &lt; 12; _y++){
    for (var i = 2; i &lt; 7; i++){
        var type = choose(0, 0, 1);
        if (type == 0){
           var a = instance_create(i * 32 - 32, -64 + 32 * _y, objBcgBuilding);
           a.xs = 24;
           a.ys = 24;
        }
    }
    for (var i = 2; i &lt; 7; i++){
        var type = choose(0, 0, 1);
        if (type == 0){
           var a = instance_create(room_width - i * 32 + 32, -64 + 32 * _y, objBcgBuilding);
           a.xs = 24;
           a.ys = 24;
        }
    }
}

global.pause = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (audio_is_playing(sndMusic)){
   audio_stop_sound(sndMusic);
}
endFlash = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_check();
alarm[0] = sec_RT(5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; 128; i++){
    if (audio_is_playing(i)){
       audio_sound_pitch(i, GAME_SPEED);
    }
}
audio_sound_pitch(sndNoAmmo, 1);
audio_sound_pitch(sndAmmo, 1);
audio_sound_pitch(sndSloMo, 1);
audio_sound_pitch(sndSloMoBack, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.particleCount = instance_number(objCircleParticle);
if (!surface_exists(surPersistence)){
   surPersistence = surface_create(640, 360);
   surface_set_target(surPersistence);
   draw_clear(c_white);
   surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_f1)){
   if (!window_get_fullscreen()){
      window_set_fullscreen(1);
   }else{
      window_set_fullscreen(0);   
   }   
}

if (keyboard_check_pressed(vk_f2)){
   global.sndVol = !global.sndVol;
   audio_master_gain(global.sndVol);  
}


if (global.gameState != GAME_STATE_PAUSE){
    global.enemyCount = instance_number(objEnemy0);
    if (global.gameState == GAME_STATE_GAME){
        global.hudFade += (1 - global.hudFade) * .25;
        if (instance_exists(objShip)){
            if (objShip.canMove != 0) global.hudFade = 0;
        }
        if (check_input(KEY_PAUSE)){
            gameSpeedSaved = GAME_SPEED;
            GAME_SPEED = 0;
            global.gameState = GAME_STATE_PAUSE;
            audio_pause_all();
            exit;
        }
    }
    
    if (global.gameState != GAME_STATE_DEAD){
       if (global.sloMo){
          GAME_SPEED = max(.05, GAME_SPEED - .1);   
       }else{          
          GAME_SPEED = min(1, GAME_SPEED + .05);
       }
    }else{
       global.sloMo = true;
       GAME_SPEED = max(.02, GAME_SPEED - .005);  
       SCROLL_SPEED = max(0, SCROLL_SPEED - .005);  
       global.hudFade = max(0, global.hudFade - random_range(0.01, .005)); 
       if (endFlash){
          global.flash = min(1.5, global.flash + .01);
          GAME_SPEED = min(1, GAME_SPEED + .05);
          if (global.flash &gt;= 1.25){
             restart();
          }
       } 
    }
    
    if (global.gameState == GAME_STATE_START){
       global.flash = max(0, global.flash - .01);
       if (global.flash == 0){
           if (check_input(KEY_SHOOT)){
              start_game();
              audio_play_sound(sndMusic, 0, 1);
              play_sound_at_volume(sndStart, 1);
           }
           if (keyboard_check(vk_escape)){
              game_end();
           }
       }
    }

    comboEndFade = max(0, comboEndFade - .01);
    if (global.comboOn){
       global.comboFade += (1 - global.comboFade) * .2;
       if (global.comboTimer &lt;= 0){
          global.comboScore ++;
          global.scr = round(global.scr + global.comboMultiplier * global.comboScore);
          comboEndValue = "+" + string(round(global.comboMultiplier * global.comboScore));
          comboEndFade = 1;
          global.comboTimer = 0;
          global.comboValue = 0;
          global.comboOn = 0;
          global.comboMultiplier = 0;
          play_sound_at_volume(sndCombo, .8);
       }
       global.comboTimer = max(0, global.comboTimer - .005);
    }else{
       global.comboFade += (0 - global.comboFade) * .2;   
    }
    
    if (global.comboMultiplier &gt; 0){
       global.comboOn = 1;
    }else{
       global.comboOn = 0;   
    }
    
    global.time ++;
    
    global.hlthInterpolated += (global.hlth - global.hlthInterpolated) * .1; 
    comboTimerInterpolated += (global.comboTimer - comboTimerInterpolated) * .2;
    scoreInterpolated += (global.scr - scoreInterpolated) * .1;
    comboMultiplierInterpolated += (global.comboMultiplier - comboMultiplierInterpolated) * .2;
    
    global.screenShake -= (global.screenShake * .05) * GAME_SPEED;
    
    if (global.screenShake &gt; 0){
       global.screenShakeFade += ((1 - global.screenShakeFade) * .5) * GAME_SPEED;
    }else{
       global.screenShakeFade += ((0 - global.screenShakeFade) * .1) * GAME_SPEED;   
    }
    global.screenShakeDir += (global.screenShake / 10) * GAME_SPEED; 
    
    viewShakeOffsetXTo = random_range(-global.screenShake, global.screenShake);
    viewShakeOffsetYTo = random_range(-global.screenShake, global.screenShake);
    viewShakeOffsetX += (viewShakeOffsetXTo - viewShakeOffsetX) * (.5 * GAME_SPEED); 
    viewShakeOffsetY += (viewShakeOffsetYTo - viewShakeOffsetY) * (.5 * GAME_SPEED); 
    
    view_yview = -sin(global.screenShakeDir) * (sin(global.time / 10) * global.screenShake * global.screenShakeFade) + (viewShakeOffsetX * global.screenShakeFade);
    view_xview = cos(global.screenShakeDir) * (sin(global.time / 10) * global.screenShake * global.screenShakeFade) + (viewShakeOffsetY * global.screenShakeFade);
}else{
    if (check_input(KEY_PAUSE)){
      GAME_SPEED = gameSpeedSaved;
      global.gameState = GAME_STATE_GAME;
      audio_resume_all();
    }  
    if (check_input(KEY_EXITPAUSE)){
      restart();
      exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BACKGROUND
if (nextEnd != 2){
   SCROLL_SPEED = 5;
   timerBcgBuilding -= GAME_SPEED * SCROLL_SPEED; 
   if (timerBcgBuilding &lt;= 0){
      if (nextEnd == 1){
         nextEnd = 2;
         
         for (var _y = 0; _y &lt; 22; _y++){
             for (var i = 2; i &lt; 7; i++){
                 var type = choose(0, 0, 1);
                 if (type == 0){
                    var a = instance_create(i * 32 - 32, -64 - 32 * _y, objBcgBuilding);
                    a.xs = 24;
                    a.ys = 24;
                 }
             }
             for (var i = 2; i &lt; 7; i++){
                 var type = choose(0, 0, 1);
                 if (type == 0){
                    var a = instance_create(room_width - i * 32 + 32, -64 - 32 * _y, objBcgBuilding);
                    a.xs = 24;
                    a.ys = 24;
                 }
             }
         }
      }else{
          for (var i = 2; i &lt; 7; i++){
              var type = choose(0, 0, 1);
              if (type == 0){
                 var a = instance_create(i * 32 - 32, -64, objBcgBuilding);
                 a.xs = 24;
                 a.ys = 24;
              }
          }
          for (var i = 2; i &lt; 7; i++){
              var type = choose(0, 0, 1);
              if (type == 0){
                 var a = instance_create(room_width - i * 32 + 32, -64, objBcgBuilding);
                 a.xs = 24;
                 a.ys = 24;
              }
          }
          timerBcgBuilding = 32;   
      }
   }     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>destroy_surface();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>destroy_surface();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>texture_set_interpolation(1);
if (global.flash &gt; 0){
    draw_set_blend_mode(bm_add);
    draw_set_colour(merge_colour(c_black, c_white, min(1, global.flash)));
    draw_rectangle(0, 0, view_wview, view_hview, 0);
    draw_set_blend_mode(bm_normal);
}

if (global.gameState == GAME_STATE_PAUSE){
   draw_set_alpha(.5);
   draw_set_colour(c_bcg);
   draw_rectangle(0, 0, view_wview, view_hview, 0);
   draw_set_colour(c_white);
   draw_set_alpha(1);   
   draw_set_valign(fa_middle);
   draw_set_halign(fa_center);
   draw_set_alpha(.7);   
   draw_text(view_xview + view_wview / 2, view_yview + view_hview / 2, "game paused##escape / start to continue#enter / select to exit");
   draw_set_alpha(1);   
   draw_set_valign(fa_top);
   draw_set_halign(fa_left);
}

draw_set_colour_write_enable(1, 1, 1, 0);
surface_set_target(surPersistence);
draw_set_blend_mode(bm_add);
draw_surface_ext(application_surface, 0, 0, 1, 1, 0, c_dkgray, 1); 
draw_set_blend_mode(bm_normal);
if (global.sloMo){
   draw_set_alpha(.5);
}else{
   draw_set_alpha(.5);   
}
draw_rectangle_colour(0, 0, 640, 360, c_black, c_black, c_black, c_black, 0);
draw_set_alpha(1);
surface_reset_target();
draw_set_colour_write_enable(1, 1, 1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//shader_set(shaderHue);
if (instance_exists(objShip)){
   screenAngle = objShip.x;
}else{
   screenAngle = room_width / 2;  
}
draw_set_colour(c_bcg);
draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, 0);
draw_set_colour(c_white); 
d3d_set_projection_perspective(0, view_yview + view_hview, view_wview, - view_hview, -(320 - screenAngle) * .05 + ((sin(global.screenShakeDir) * (sin(global.time / 15) * global.screenShake)) * global.screenShakeFade) * .3);
with (objCircleParticle){
     if (!inverted){
        draw_set_alpha(a);
     
        draw_set_colour(c_white);
     
        draw_circle(x, y, r + 2, 0);
        draw_set_colour(c_bcg);
     }
}
draw_set_alpha(1);

d3d_set_projection_ortho(0, 0, room_width, room_height, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_set(shaderCRT);
shader_set_uniform_f(global.suTime, global.time * .05);
draw_surface_ext(surPersistence, 0, 0, 1, 1, 0, merge_colour($ffb133, $9933ff, GAME_SPEED), 1);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fntMain);
global.hlthInterpolated = max(0, global.hlthInterpolated);

d3d_set_projection_perspective(0, view_yview + view_hview, view_wview, - view_hview, -(320 - screenAngle) * .05 + ((sin(global.screenShakeDir) * (sin(global.time / 15) * global.screenShake)) * global.screenShakeFade) * .3);

draw_set_colour(c_bcg);
with (objCircleParticle){
     draw_set_alpha(1);
     if (inverted){
        draw_set_alpha(a * _a);
        draw_set_colour(c_white);
     }
     draw_circle(x, y, r, 0);
     draw_set_colour(c_bcg);
}
draw_set_alpha(1);
draw_set_colour(c_white);
d3d_transform_set_identity();
with (objBcgBuilding){
     d3d_vector_cube(x, y, xs, ys, -h, 200, h / 150, 0);
}

with (objBullet){
     var _x = x;
     var _y = y;
     if (global.sloMo &amp;&amp; !players){
        _x = x + irandom_range(-1, 1);
        _y = y + irandom_range(-1, 1);
     }
     draw_sprite_ext(sprBullet, 0, _x, _y, 1, 1, 0, c_white, image_alpha);
}


with (objShip){
     draw_set_alpha((.1 * (1 - global.hlthInterpolated)) * image_alpha);
     var _y = y;
     while (_y &gt; 0){
           draw_line_width(x - 1, y - _y - 5, x, y - _y - 10, 2);
           _y -= 10;
     }
     draw_set_alpha(1);
     d3d_draw_layered_sprite(sprShip, 0, x, y, 0, 1, 1, -dY * 5, 0, -dX * 2.5, image_alpha, 3);
}
with (objEnemy0){
     if (y &gt; -10) d3d_draw_layered_sprite(sprite_index, 0, x, y, 0, 1, 1, 0, 0, 0, image_alpha, 3);
}

d3d_set_projection_ortho(0, 0, room_width, room_height, -((sin(global.screenShakeDir) * (sin(global.time / 15) * global.screenShake)) * global.screenShakeFade) * .3);


if (global.gameState == GAME_STATE_START){
   texture_set_interpolation(0);
   draw_set_valign(fa_middle);
   draw_set_halign(fa_center);
   draw_text_transformed(view_xview + view_wview / 2, view_yview + view_hview - 275, "0x0D", 4, 4, 0);
   draw_text_transformed(view_xview + view_wview / 2, view_yview + view_hview - 245, "best: " + prepend_zeroes(string(global.highScore), 9), 1, 1, 0);
   draw_text_transformed(view_xview + view_wview / 2 + sin(global.time / 5) * 10, view_yview + view_hview - 65, "fire to start", 2, 2, 0);
   draw_text_transformed(view_xview + view_wview / 2, view_yview + view_hview - 160, "keyboard: arrow keys / z (y) / x#controller: d-pad (las) / a / b (rst/rsb)#f1 - fullscreen | f2 - mute sound##- catch bullets in slow-mode to replenish ammo#- destroy enemies to restore energy#- the lower your energy is, the more points you get!", 1, 1, 0);
   draw_set_valign(fa_bottom);
   draw_text_transformed(view_xview + view_wview / 2, view_yview + view_hview - 15, "made by blokatt for the 20th gm(48)! | @blokatt | blokatt.net | october 2016 | jam release", 1, 1, 0);

   draw_set_valign(fa_top);
   draw_set_valign(fa_left);
   
   
   texture_set_interpolation(1);
}

if (global.gameState != GAME_STATE_START){
    texture_set_interpolation(1);
    draw_set_halign(fa_left);
    draw_set_alpha(comboEndFade);
    draw_text_transformed(view_xview + 28, view_yview + view_hview - 79 - global.comboFade * 5 - (1 - comboEndFade) * 10, comboEndValue, 1, 1, 0);
    draw_set_alpha(1);
    
    if (global.hlth &lt; .25){
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        draw_set_colour(c_bcg);
        draw_set_alpha((sin(global.time) / 2 + .5) * global.hudFade);
        texture_set_interpolation(0);
        var str = "! energy: " + prepend_zeroes(string(round(global.hlthInterpolated * 100)), 2) + "% !";
        draw_text_transformed(view_xview + view_wview / 2 + sin(global.time / 10) * 10 - 1, view_yview + 30, str, 1, 1, 0);
        draw_text_transformed(view_xview + view_wview / 2 + sin(global.time / 10) * 10 + 1, view_yview + 30, str, 1, 1, 0);
        draw_text_transformed(view_xview + view_wview / 2 + sin(global.time / 10) * 10, view_yview + 30 - 1, str, 1, 1, 0);
        draw_text_transformed(view_xview + view_wview / 2 + sin(global.time / 10) * 10, view_yview + 30 + 1, str, 1, 1, 0);
        draw_set_colour(c_white);
        draw_text_transformed(view_xview + view_wview / 2 + sin(global.time / 10) * 10, view_yview + 30, str, 1, 1, 0);
        texture_set_interpolation(1);
        draw_set_alpha(1);
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
    }
    texture_set_interpolation(0);
    draw_set_alpha(global.hudFade);
    draw_set_valign(fa_bottom);
    draw_text_transformed(view_xview + 28, view_yview + view_hview - 33 - global.comboFade * 5, prepend_zeroes(string(round(scoreInterpolated)), 9), 2, 2, 0);
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_right);
    draw_text_transformed(view_xview + view_wview - 24 + (1 - global.comboFade) * 100, view_yview + view_hview - 10, string(round(comboMultiplierInterpolated)) + "x", 3, 3, 0);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    texture_set_interpolation(1);

    var offset = round(11 + global.comboFade);
    for (var i = 0; i &lt; global.ammo; i++){
        draw_line_width(view_xview + 192 + (i div offset * 6), view_yview + view_hview - 63 + (i % offset) * 4- global.comboFade * 5 , view_xview + 197 + (i div offset * 6), view_yview + view_hview - 63 + (i % offset) * 4 - global.comboFade * 5, 2);
    }
    
    draw_set_colour(c_bcg);
    draw_rectangle(view_xview + 28, view_yview + view_hview - 37, view_xview + 187, view_yview + view_hview - 24, 0);
    draw_set_colour(c_white);
    draw_rectangle(view_xview + 28, view_yview + view_hview - 37, view_xview + 187, view_yview + view_hview - 24, 1);
    
    //health bar
    if (global.hlthInterpolated &gt; 0){
        draw_set_colour(merge_colour(merge_colour(c_white, c_bcg, (sin(global.time / (10 - ((1 - global.hlth) * 5))) /2) + .5), c_white, global.hlth));
        draw_rectangle(view_xview + 31, view_yview + view_hview - 34, view_xview + 31 + 153 * global.hlthInterpolated, view_yview + view_hview - 27, 0);
        draw_set_colour(c_white);
    }
    
    draw_line_width(view_xview + 27, view_yview + view_hview - 42, view_xview + 27 + 155 * comboTimerInterpolated, view_yview + view_hview - 42, 2);
    draw_set_alpha(1);
}
draw_set_colour(merge_colour(merge_colour(c_white, c_bcg, (sin(global.time / (10 - ((1 - global.hlth) * 5))) /2) + .5), c_white, global.hlth));
draw_rectangle(view_xview + 10, view_yview + 10, view_xview + view_wview - 10, view_yview + view_hview - 10, 1);
draw_set_colour(c_white);
texture_set_interpolation(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
